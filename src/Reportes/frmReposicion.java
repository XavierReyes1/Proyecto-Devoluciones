/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Reportes;

/**
 *
 * @author Axel Reyes
 */
import Clases.DatabaseConnection;
import Clases.userClass;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Statement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import net.sf.dynamicreports.report.builder.MarginBuilder;
import static net.sf.dynamicreports.report.builder.DynamicReports.margin;
import javax.swing.JOptionPane;


import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;

import java.io.FileNotFoundException;



import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.exception.DRException;

import java.io.File;
import java.io.FileOutputStream;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.SplitType;
import net.sf.dynamicreports.report.constant.VerticalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;





public class frmReposicion extends javax.swing.JFrame {

    /**
     * Creates new form frmReposicion
     */
    public frmReposicion() {
        initComponents();
        cargarComboBox();
        cargarReporte();
         lbUsuario.setText(userClass.getUsername());
         FechaActual();
         configurarComboBox();
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox<>();
        cmbAno = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tReporte = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jLabel2.setText("Nombre :");

        jLabel3.setText("Fecha");

        lbUsuario.setText("jLabel4");

        labelFecha.setText("jLabel4");

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTitulo.setText("REPORTE DE REPOSICIÓN DE PRODUCTOS ");

        jLabel5.setText("Año: ");

        tReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tReporte.setEnabled(false);
        jScrollPane1.setViewportView(tReporte);

        jLabel6.setText("Mes:");

        btnImprimir.setText("Crear Reporte");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblLogo)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146)
                                .addComponent(jLabel5)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFecha)
                            .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(219, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbTitulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImprimir)
                        .addGap(67, 67, 67))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(lbUsuario)
                            .addComponent(labelFecha))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImprimir)
                                .addGap(31, 31, 31))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        try {
            // 1. Configurar el informe con hoja A4 (orientación vertical) y márgenes
            JasperReportBuilder report = DynamicReports.report();
            report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
            .setPageMargin(DynamicReports.margin(20)); // Aumentar márgenes para mejor presentación

            // 2. Definir estilos
            // Estilo con bordes
            StyleBuilder borderedStyle = DynamicReports.stl.style()
            .setBorder(DynamicReports.stl.pen1Point());

            // Estilo para encabezados de la tabla
            StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setBackgroundColor(new Color(230, 230, 230)) // Color más suave
            .setFontSize(12)
            .setBold(true)
            .setPadding(5); // Añadir padding para mejor visualización

            // Estilo para los textos del encabezado (Empresa, Fecha, Usuario)
            StyleBuilder infoStyle = DynamicReports.stl.style()
            .setFontSize(10)
            .setBold(false)
            .setPadding(2); // Añadir padding

            // Estilo para centrar el contenido de las celdas de la tabla
            StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setPadding(5); // Añadir padding para mejor visualización

            // 3. Definir las columnas de la tabla
            // 3. Definir las columnas de la tabla
            String[] columnNames = { "ID", "Nombre", "Fecha", "Cantidad"};
            int[] columnWidths = {80, 145, 100, 145}; // Ajustar anchos de columnas

            for (int i = 0; i < columnNames.length; i++) {
                report.addColumn(
                    Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
                    .setFixedWidth(columnWidths[i])
                    .setStyle(cellStyle) // Aplicar el estilo de celda centrado
                    .setTitleStyle(headerStyle)
                );
            }
            // 4. Crear un DRDataSource con los datos de la tabla
            DRDataSource dataSource = new DRDataSource(
                "ID", "Nombre", "Fecha", "Cantidad"
            );

            // Llenar el data source con los datos de la tabla
            for (int i = 0; i < tReporte.getRowCount(); i++) {
                dataSource.add(
                    tReporte.getValueAt(i, 0).toString(),
                    tReporte.getValueAt(i, 1).toString(),
                    tReporte.getValueAt(i, 2).toString(),
                    tReporte.getValueAt(i, 3).toString()
                   
                );
            }
            report.setDataSource(dataSource);

            // 5. Construir el encabezado con logo a la izquierda y datos a la derecha
            try {
                // Cargar la imagen del logo
                java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
                    getClass().getResourceAsStream("/imagenes/logo.jpg"));

                // Encabezado (logo + datos de empresa, fecha, usuario)
                report.title(
                    Components.horizontalList() // Contenedor horizontal
                    .add(
                        // LOGO
                        Components.image(logo)
                        .setFixedDimension(80, 80) // Aumentar tamaño del logo
                        .setStyle(DynamicReports.stl.style().setPadding(10)),
                        Components.horizontalGap(20), // Espacio entre logo y texto
                        // Bloque vertical con la info (Empresa, Fecha, Usuario)
                        Components.verticalList(

                            Components.text("                                                                                                                                                                            "
                                + "Empresa: SuperMercado Abigail"+"                                          Fecha: " + labelFecha.getText())
                            .setStyle(infoStyle),
                            Components.text("Usuario: " + lbUsuario.getText())
                            .setStyle(infoStyle)
                        )
                    )
                    // Opcional: bordes alrededor de la sección de encabezado
                    .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
                );

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                    "Error al cargar el logo: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }

            // 6. Título principal centrado debajo del encabezado
            report.title(
                Components.verticalGap(10), // Un poco de separación
                Components.text(lbTitulo.getText()+cmbMes.getSelectedItem().toString().toUpperCase()+" "+ cmbAno.getSelectedItem().toString())
                .setStyle(DynamicReports.stl.style()
                    .setFontSize(16) // Aumentar tamaño de fuente
                    .setBold(true)
                    .setForegroundColor(new Color(0, 0, 0))) // Color negro
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
                Components.verticalGap(10),
                Components.line().setPen(DynamicReports.stl.pen1Point()), // Línea separadora
                    Components.line(),Components.text("        ")
            );

            // 7. Pie de página con información de generación y número de página
            report.pageFooter(
              Components.horizontalList(
                  Components.pageNumber()
                      .setStyle(DynamicReports.stl.style()
                          .setFontSize(8)
                          .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
                      )
                    )
                );

            // 8. Evitar que se divida la banda de detalle entre páginas
            report.setDetailSplitType(SplitType.PREVENT);

            // 9. Mostrar el informe en el visor gráfico sin cerrar el programa
            report.show(false); // 'false' evita que el programa se cierre

        } catch (DRException e) {
            JOptionPane.showMessageDialog(this,
                "Error: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnImprimirActionPerformed



    
    private void cargarReporte() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][] {}, // Datos vacíos inicialmente
        new String[] {     // Títulos de las columnas
            "ID", 
            "Nombre", 
            "Fecha", 
            "Cantidad" 
        });

    tReporte.setModel(model);
    model.setRowCount(0);

    // Obtener los valores seleccionados de los ComboBox
    String mesSeleccionado = cmbMes.getSelectedItem().toString();
    String anioSeleccionadoStr = cmbAno.getSelectedItem().toString().trim(); // Eliminar espacios en blanco

    // Validar que el año no esté vacío
    if (anioSeleccionadoStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un año válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Salir del método si el año no es válido
    }

    try {
        int anioSeleccionado = Integer.parseInt(anioSeleccionadoStr); // Convertir a entero

        // Llamada al procedimiento almacenado
        String sql = "{CALL sp_reporte_reposicion_productos(?, ?)}"; // Usar CALL para ejecutar procedimientos almacenados

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall(sql)) {

            // Establecer los parámetros del procedimiento almacenado
            cstmt.setString(1, mesSeleccionado); // @mes (nombre del mes)
            cstmt.setInt(2, anioSeleccionado);   // @anio

            // Ejecutar el procedimiento almacenado
            ResultSet rs = cstmt.executeQuery();

            // Procesar el ResultSet
            while (rs.next()) {
                int idProducto = rs.getInt("id_producto");
                String nombre = rs.getString("nombre_producto");
                String fechas = rs.getString("fechas_reposicion"); // Cambiado a String
                int total = rs.getInt("total_repuesto");

                // Agregar los datos a la tabla
                model.addRow(new Object[]{idProducto, nombre, fechas, total});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar el reporte: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El año seleccionado no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
private void cargarComboBox() {
    // Cargar meses (nombres)
    String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", 
                      "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    for (String mes : meses) {
        cmbMes.addItem(mes);
    }

    // Cargar años
    String sqlAnos = "SELECT DISTINCT YEAR(fecha_reposicion) AS año FROM reposiciones ORDER BY año ASC";
    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sqlAnos)) {

        while (rs.next()) {
            cmbAno.addItem(String.valueOf(rs.getInt("año")));
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar años: " + e.getMessage());
    }
}


private void configurarComboBox() {
    // Agregar un ItemListener a cmbCategoria
    cmbMes.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categoría
            }
        }
    });

    // Agregar un ItemListener a cmbProveedor
    cmbAno.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione un proveedor
            }
        }
    });
}

     
       
private void FechaActual(){
              Date fechaActual = new Date();

        // Formatear la fecha
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy");
        String fechaFormateada = formatter.format(fechaActual);

        // Crear el JLabel con la fecha
         labelFecha.setText(fechaFormateada);
        }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmReposicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmReposicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmReposicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmReposicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmReposicion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cmbAno;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JTable tReporte;
    // End of variables declaration//GEN-END:variables
}
