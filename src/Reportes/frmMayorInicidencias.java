/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Reportes;

/**
 *
 * @author Axel Reyes
 */


import Clases.DatabaseConnection;
import Clases.userClass;
import java.awt.Color;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

import java.sql.Connection;
import javax.swing.table.DefaultTableModel;

import javax.swing.JOptionPane;
import java.util.Date;


import java.awt.Font;
import java.awt.RenderingHints;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;


import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.exception.DRException;

import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.SplitType;
import net.sf.dynamicreports.report.constant.VerticalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
public class frmMayorInicidencias extends javax.swing.JFrame {

    /**
     * Creates new form frmMayorInicidencias
     */
    public frmMayorInicidencias() {
        initComponents();
        cargarComboBox();
      cargarReporte();
         lbUsuario.setText(userClass.getUsername());
         FechaActual();
         configurarComboBox();
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tReporte = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        cmbAno = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jLabel2.setText("Nombre :");

        jLabel3.setText("Fecha");

        lbUsuario.setText("jLabel4");

        labelFecha.setText("jLabel4");

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTitulo.setText("REPORTE DE PRODUCTOS CON MAYOR INCIDENCIA DE DEVOLUCIONES ");

        tReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tReporte.setEnabled(false);
        jScrollPane1.setViewportView(tReporte);

        jLabel6.setText("Mes");

        btnImprimir.setText("Crear Reporte");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        cmbAno.setToolTipText("");

        jLabel5.setText("AÃ±o");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblLogo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUsuario)
                                .addGap(284, 284, 284)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(labelFecha))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTitulo)
                        .addGap(35, 35, 35)
                        .addComponent(btnImprimir)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(lbUsuario)
                            .addComponent(labelFecha))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnImprimir)
                                .addGap(45, 45, 45)))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        
     try {
        // 1. Configurar el informe con hoja A4 (orientaciÃ³n vertical) y mÃ¡rgenes
        JasperReportBuilder report = DynamicReports.report();
        report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
            .setPageMargin(DynamicReports.margin(20)); // Aumentar mÃ¡rgenes para mejor presentaciÃ³n

        // 2. Definir estilos
        StyleBuilder borderedStyle = DynamicReports.stl.style()
            .setBorder(DynamicReports.stl.pen1Point());

        StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setBackgroundColor(new Color(230, 230, 230))
            .setFontSize(15) // Aumentar el tamaÃ±o de la fuente del encabezado
            .setBold(true)
            .setPadding(5);

        StyleBuilder infoStyle = DynamicReports.stl.style()
            .setFontSize(12) // Aumentar el tamaÃ±o de la fuente de la informaciÃ³n
            .setBold(false)
            .setPadding(2);

        StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setFontSize(14) // Aumentar el tamaÃ±o de la fuente de las celdas
            .setPadding(5);

        // 3. Crear un DRDataSource con los datos de la tabla
        DRDataSource dataSource = new DRDataSource(
            "ID Producto", "Nombre", "CategorÃ­a", "Proveedor", "cantidad"
        );

        // Llenar el data source con los datos de la tabla
        for (int i = 0; i < tReporte.getRowCount(); i++) {
            dataSource.add(
                tReporte.getValueAt(i, 0).toString(),
                tReporte.getValueAt(i, 1).toString(),
                tReporte.getValueAt(i, 2).toString(),
                tReporte.getValueAt(i, 3).toString(),
                tReporte.getValueAt(i, 4).toString()
            );
        }

        // 4. Crear un grÃ¡fico con JFreeChart
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < tReporte.getRowCount(); i++) {
            String nombre = tReporte.getValueAt(i, 1).toString();
            int cantidad = Integer.parseInt(tReporte.getValueAt(i, 4).toString());
            dataset.addValue(cantidad, "Cantidad", nombre);
        }

        // Crear el grÃ¡fico
        JFreeChart chart = ChartFactory.createBarChart(
            cmbMes.getSelectedItem().toString(), // TÃ­tulo del grÃ¡fico
            "Nombre", // Etiqueta del eje X
            "Cantidad", // Etiqueta del eje Y
            dataset // Dataset con los datos
        );

        // Mejorar la calidad del grÃ¡fico
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRenderer(new BarRenderer());
        plot.setDomainGridlinesVisible(true);
        plot.setRangeGridlinesVisible(true);

        // Habilitar anti-aliasing
        chart.getRenderingHints().put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Cambiar el color de las barras
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        Color colorBarras = Color.decode("#80CAA6");
        renderer.setSeriesPaint(0, colorBarras);

        // Aumentar el tamaÃ±o de las etiquetas del eje Y (Cantidad)
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // TamaÃ±o de fuente mÃ¡s grande
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits()); // Asegurar que sean enteros

        // Aumentar el tamaÃ±o de las etiquetas del eje X (Nombre)
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // Aumentar el tamaÃ±o aquÃ­
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90); // Rotar etiquetas 90 grados

        // Aumentar el tamaÃ±o del tÃ­tulo del grÃ¡fico
        chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 30)); // TamaÃ±o de fuente mÃ¡s grande
        chart.getLegend().setItemFont(new Font("SansSerif", Font.PLAIN, 30));
        // Aumentar el tamaÃ±o de las etiquetas de los ejes
        plot.getDomainAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25)); // Eje X
        plot.getRangeAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25));  // Eje Y

        // Aumentar el tamaÃ±o de la imagen
        BufferedImage chartImage = chart.createBufferedImage(1200, 1200);

        // 5. Construir el encabezado con logo a la izquierda y datos a la derecha
        try {
            // Cargar la imagen del logo
            java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
                getClass().getResourceAsStream("/imagenes/logo.jpg"));

            // Encabezado (logo + datos de empresa, fecha, usuario)
            report.title(
                Components.horizontalList() // Contenedor horizontal
                .add(
                    // LOGO
                    Components.image(logo)
                    .setFixedDimension(80, 80) // Aumentar tamaÃ±o del logo
                    .setStyle(DynamicReports.stl.style().setPadding(10)),
                    Components.horizontalGap(20), // Espacio entre logo y texto
                    // Bloque vertical con la info (Empresa, Fecha, Usuario)
                     Components.verticalList(

                            Components.text("                                                                                                                                                                            "
                                + "Empresa: SuperMercado Abigail"+"                          Fecha: " + labelFecha.getText())
                            .setStyle(infoStyle),
                            Components.text("Usuario: " + lbUsuario.getText())
                            .setStyle(infoStyle)
                        )
                )
                // Opcional: bordes alrededor de la secciÃ³n de encabezado
                .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
            );

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar el logo: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }

        // 6. TÃ­tulo principal centrado debajo del encabezado
        report.title(
            Components.verticalGap(10),
            Components.text(lbTitulo.getText()+" "+cmbMes.getSelectedItem().toString().toUpperCase()+" "+ cmbAno.getSelectedItem().toString())
                .setStyle(DynamicReports.stl.style()
                    .setFontSize(20) // Aumentar el tamaÃ±o de la fuente del tÃ­tulo
                    .setBold(true)
                    .setForegroundColor(new Color(0, 0, 0)))
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.verticalGap(20),
            Components.line(),Components.text("        "),
            
            Components.image(chartImage)
                .setFixedDimension(555, 450)
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.pageBreak()
          
        );

        // 7. Definir las columnas de la tabla
        String[] columnNames = {"ID Producto", "Nombre", "CategorÃ­a", "Proveedor", "cantidad"};
        int[] columnWidths = {80, 145, 100, 105, 80};

        for (int i = 0; i < columnNames.length; i++) {
            report.addColumn(
                Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
                    .setFixedWidth(columnWidths[i])
                    .setStyle(cellStyle)
                    .setTitleStyle(headerStyle)
            );
        }

        // 8. Agregar la tabla al detalle
        report.setDataSource(dataSource);
        report.setDetailSplitType(SplitType.PREVENT);

        // 9. Pie de pÃ¡gina con informaciÃ³n de generaciÃ³n y nÃºmero de pÃ¡gina
        report.pageFooter(
              Components.horizontalList(
                  Components.pageNumber()
                      .setStyle(DynamicReports.stl.style()
                          .setFontSize(8)
                          .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
                      )
                    )
                );

        // 10. Mostrar el informe en el visor grÃ¡fico sin cerrar el programa
        report.show(false);

    } catch (DRException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_btnImprimirActionPerformed

    
   


    
private void cargarReporte() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][] {}, // Datos vacÃ­os inicialmente
        new String[] {     // TÃ­tulos de las columnas
            "ID Producto", 
            "Nombre", 
            "CategorÃ­a", 
            "Proveedor", 
            "Cantidad"
        });

    tReporte.setModel(model);
    model.setRowCount(0);

    // Obtener el mes seleccionado en espaÃ±ol
    String mesSeleccionado = cmbMes.getSelectedItem().toString();
    String mesEnIngles = convertirMesAIngles(mesSeleccionado); // Convertir a inglÃ©s para la consulta
    String aÃ±o = cmbAno.getSelectedItem().toString();
    // Construir la consulta SQL basada en la vista vIncidencia_Devoluciones
    String sql = "SELECT * FROM vIncidencia_Devoluciones WHERE mes = ? and AÃ±o = ?";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // Establecer el parÃ¡metro del mes
        pstmt.setString(1, mesEnIngles);
        pstmt.setString(2, aÃ±o);

        // Ejecutar la consulta
        ResultSet rs = pstmt.executeQuery();

        // Procesar el ResultSet
        while (rs.next()) {
            int idProducto = rs.getInt("id_producto");
            String nombre = rs.getString("nombre_producto");
            String categoria = rs.getString("nombre_categoria");
            String proveedor = rs.getString("nombre_proveedor");
            int total_daÃ±o = rs.getInt("cantidad_devoluciones");

            // Agregar los datos a la tabla
            model.addRow(new Object[]{idProducto, nombre, categoria, proveedor, total_daÃ±o});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar el reporte: " + e.getMessage());
    }
}

private void cargarComboBox() {
    // Cargar meses en espaÃ±ol
    String[] mesesEnEspanol = {
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    };

    cmbMes.removeAllItems();
    cmbMes.addItem(" "); // OpciÃ³n por defecto (sin filtro)
    for (String mes : mesesEnEspanol) {
        cmbMes.addItem(mes);
    }
    
    
    String sqlAnios = "SELECT DISTINCT aÃ±o FROM vista_reporte_nc ORDER BY aÃ±o ASC";
    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sqlAnios)) {

        while (rs.next()) {
            cmbAno.addItem(rs.getString("aÃ±o"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar aÃ±os: " + e.getMessage());
    }

}

// MÃ©todo para convertir el mes en espaÃ±ol a inglÃ©s
private String convertirMesAIngles(String mesEnEspanol) {
    switch (mesEnEspanol) {
        case "Enero": return "January";
        case "Febrero": return "February";
        case "Marzo": return "March";
        case "Abril": return "April";
        case "Mayo": return "May";
        case "Junio": return "June";
        case "Julio": return "July";
        case "Agosto": return "August";
        case "Septiembre": return "September";
        case "Octubre": return "October";
        case "Noviembre": return "November";
        case "Diciembre": return "December";
        default: return "";
    }
}



    private void configurarComboBox() {
    // Agregar un ItemListener a cmbCategoria
    cmbMes.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categorÃ­a
            }
        }
    });
       cmbAno.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categorÃ­a
            }
        }
    });


}


       
       
    private void FechaActual(){
              Date fechaActual = new Date();

        // Formatear la fecha
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy");
        String fechaFormateada = formatter.format(fechaActual);

        // Crear el JLabel con la fecha
         labelFecha.setText(fechaFormateada);
     }  
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMayorInicidencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMayorInicidencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMayorInicidencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMayorInicidencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMayorInicidencias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cmbAno;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JTable tReporte;
    // End of variables declaration//GEN-END:variables
}
