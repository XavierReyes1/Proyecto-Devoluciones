/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Reportes;
import Clases.DatabaseConnection;
import Clases.userClass;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.Date;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.exception.DRException;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.SplitType;
import net.sf.dynamicreports.report.constant.VerticalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;

/**
 *
 * @author Axel Reyes
 */
public class frmCausas extends javax.swing.JFrame {

    /**
     * Creates new form frmCausas
     */
    public frmCausas() {
        initComponents();
        cargarReporte();
        FechaActual();
         lbUsuario.setText(userClass.getUsername());
       configurarDateChooser();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
          JTextFieldDateEditor editor = (JTextFieldDateEditor) jdInicio.getDateEditor();
editor.setForeground(Color.white); // Inicialmente rojo

jdInicio.addPropertyChangeListener("date", new PropertyChangeListener() {
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // Cuando cambia la fecha, forzar el color del editor
        ((JTextFieldDateEditor) jdInicio.getDateEditor()).setForeground(Color.white);
    }
});
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tReporte = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        jdInicio = new com.toedter.calendar.JDateChooser();
        jdFin = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setText("Fecha Final");

        tReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tReporte.setEnabled(false);
        jScrollPane1.setViewportView(tReporte);

        jLabel6.setText("Fecha inicio");

        btnImprimir.setText("Crear Reporte");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jLabel2.setText("Nombre :");

        jLabel3.setText("Fecha");

        lbUsuario.setText("jLabel4");

        labelFecha.setText("jLabel4");

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTitulo.setText("REPORTE DE ANÁLISIS DE CAUSAS DE DAÑO");

        jdInicio.setDateFormatString("yyyy-MM-dd");

        jdFin.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblLogo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbTitulo)
                        .addGap(145, 145, 145)
                        .addComponent(btnImprimir)
                        .addGap(89, 89, 89))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jdInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(285, 285, 285)
                                .addComponent(jLabel5)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFecha)
                            .addComponent(jdFin, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(26, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(lbUsuario)
                    .addComponent(labelFecha))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImprimir)
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed

//          try {
//        // 1. Configurar el informe con hoja A4 (orientación vertical) y márgenes
//        JasperReportBuilder report = DynamicReports.report();
//        report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
//            .setPageMargin(DynamicReports.margin(20)); // Aumentar márgenes para mejor presentación
//
//        // 2. Definir estilos
//        StyleBuilder borderedStyle = DynamicReports.stl.style()
//            .setBorder(DynamicReports.stl.pen1Point());
//
//        StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
//            .setHorizontalAlignment(HorizontalAlignment.CENTER)
//            .setVerticalAlignment(VerticalAlignment.MIDDLE)
//            .setBackgroundColor(new Color(230, 230, 230))
//            .setFontSize(15) // Aumentar el tamaño de la fuente del encabezado
//            .setBold(true)
//            .setPadding(5);
//
//        StyleBuilder infoStyle = DynamicReports.stl.style()
//            .setFontSize(12) // Aumentar el tamaño de la fuente de la información
//            .setBold(false)
//            .setPadding(2);
//
//        StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
//            .setHorizontalAlignment(HorizontalAlignment.CENTER)
//            .setVerticalAlignment(VerticalAlignment.MIDDLE)
//            .setFontSize(14) // Aumentar el tamaño de la fuente de las celdas
//            .setPadding(5);
//
//        // 3. Crear un DRDataSource con los datos de la tabla
//        DRDataSource dataSource = new DRDataSource(
//             "ID Producto", "Nombre", "Causa de Daño", "Total Unidades Dañadas"
//        );
//
//        // Llenar el data source con los datos de la tabla
//        for (int i = 0; i < tReporte.getRowCount(); i++) {
//            dataSource.add(
//                tReporte.getValueAt(i, 0).toString(),
//                tReporte.getValueAt(i, 1).toString(),
//                tReporte.getValueAt(i, 2).toString(),
//                tReporte.getValueAt(i, 3).toString()
//             
//            );
//        }
//
//      // 4. Crear un gráfico con JFreeChart
//            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//            int maxElements = Math.min(tReporte.getRowCount(), 8); // Limitar a los primeros 8 elementos
//            for (int i = 0; i < maxElements; i++) {
//                String nombre = tReporte.getValueAt(i, 2).toString();
//                int cantidad = Integer.parseInt(tReporte.getValueAt(i, 3).toString());
//                dataset.addValue(cantidad, "Total Unidades Dañadas", nombre);
//            }
//
//        // Crear el gráfico
//        JFreeChart chart = ChartFactory.createBarChart(
//            obtenerRangoFechas(), // Título del gráfico
//            "Causas de Daño", // Etiqueta del eje X
//            "Total Unidades Dañadas", // Etiqueta del eje Y
//            dataset // Dataset con los datos
//        );
//
//        // Mejorar la calidad del gráfico
//        CategoryPlot plot = chart.getCategoryPlot();
//        plot.setRenderer(new BarRenderer());
//        plot.setDomainGridlinesVisible(true);
//        plot.setRangeGridlinesVisible(true);
//
//        // Habilitar anti-aliasing
//        chart.getRenderingHints().put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
//
//        // Cambiar el color de las barras
//        BarRenderer renderer = (BarRenderer) plot.getRenderer();
//        Color colorBarras = Color.decode("#80CAA6");
//        renderer.setSeriesPaint(0, colorBarras);
//
//        // Aumentar el tamaño de las etiquetas del eje Y (Cantidad)
//        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
//        rangeAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // Tamaño de fuente más grande
//        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits()); // Asegurar que sean enteros
//
//        // Aumentar el tamaño de las etiquetas del eje X (Nombre)
//        CategoryAxis domainAxis = plot.getDomainAxis();
//        domainAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // Aumentar el tamaño aquí
//        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90); // Rotar etiquetas 90 grados
//
//        // Aumentar el tamaño del título del gráfico
//        chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 30)); // Tamaño de fuente más grande
//        chart.getLegend().setItemFont(new Font("SansSerif", Font.PLAIN, 30));
//        // Aumentar el tamaño de las etiquetas de los ejes
//        plot.getDomainAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25)); // Eje X
//        plot.getRangeAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25));  // Eje Y
//
//        // Aumentar el tamaño de la imagen
//        BufferedImage chartImage = chart.createBufferedImage(1200, 1200);
//
//        // 5. Construir el encabezado con logo a la izquierda y datos a la derecha
//        try {
//            // Cargar la imagen del logo
//            java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
//                getClass().getResourceAsStream("/imagenes/logo.jpg"));
//
//            // Encabezado (logo + datos de empresa, fecha, usuario)
//            report.title(
//                Components.horizontalList() // Contenedor horizontal
//                .add(
//                    // LOGO
//                    Components.image(logo)
//                    .setFixedDimension(80, 80) // Aumentar tamaño del logo
//                    .setStyle(DynamicReports.stl.style().setPadding(10)),
//                    Components.horizontalGap(20), // Espacio entre logo y texto
//                    // Bloque vertical con la info (Empresa, Fecha, Usuario)
//                     Components.verticalList(
//
//                            Components.text("                                                                                                                                                                            "
//                                + "Empresa: SuperMercado Abigail"+"                          Fecha: " + labelFecha.getText())
//                            .setStyle(infoStyle),
//                            Components.text("Usuario: " + lbUsuario.getText())
//                            .setStyle(infoStyle)
//                        )
//                )
//                // Opcional: bordes alrededor de la sección de encabezado
//                .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
//            );
//
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this,
//                "Error al cargar el logo: " + ex.getMessage(),
//                "Error",
//                JOptionPane.ERROR_MESSAGE);
//        }
//
//        // 6. Título principal centrado debajo del encabezado
//        report.title(
//            Components.verticalGap(10),
//            Components.text(lbTitulo.getText())
//                .setStyle(DynamicReports.stl.style()
//                    .setFontSize(20) // Aumentar el tamaño de la fuente del título
//                    .setBold(true)
//                    .setForegroundColor(new Color(0, 0, 0)))
//                .setHorizontalAlignment(HorizontalAlignment.CENTER),
//            Components.verticalGap(20),
//            Components.line(),Components.text("        "),
//            
//            Components.image(chartImage)
//                .setFixedDimension(555, 450)
//                .setHorizontalAlignment(HorizontalAlignment.CENTER),
//            Components.pageBreak()
//          
//        );
//
//        // 7. Definir las columnas de la tabla
//        String[] columnNames = {"ID Producto", "Nombre", "Causa de Daño", "Total Unidades Dañadas"};
//        int[] columnWidths = {80, 145, 150, 105};
//
//        for (int i = 0; i < columnNames.length; i++) {
//            report.addColumn(
//                Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
//                    .setFixedWidth(columnWidths[i])
//                    .setStyle(cellStyle)
//                    .setTitleStyle(headerStyle)
//            );
//        }
//
//        // 8. Agregar la tabla al detalle
//        report.setDataSource(dataSource);
//        report.setDetailSplitType(SplitType.PREVENT);
//
//        // 9. Pie de página con información de generación y número de página
//        report.pageFooter(
//              Components.horizontalList(
//                  Components.pageNumber()
//                      .setStyle(DynamicReports.stl.style()
//                          .setFontSize(8)
//                          .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
//                      )
//                    )
//                );
//
//        // 10. Mostrar el informe en el visor gráfico sin cerrar el programa
//        report.show(false);
//
//    } catch (DRException e) {
//        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//    }






   try {
//         1. Configurar el informe con hoja A4 (orientación vertical) y márgenes
        JasperReportBuilder report = DynamicReports.report();
        report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
            .setPageMargin(DynamicReports.margin(20)); // Aumentar márgenes para mejor presentación

//         2. Definir estilos
        StyleBuilder borderedStyle = DynamicReports.stl.style()
            .setBorder(DynamicReports.stl.pen1Point());

        StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setBackgroundColor(new Color(230, 230, 230))
            .setFontSize(15) // Aumentar el tamaño de la fuente del encabezado
            .setBold(true)
            .setPadding(5);

        StyleBuilder infoStyle = DynamicReports.stl.style()
            .setFontSize(12) // Aumentar el tamaño de la fuente de la información
            .setBold(false)
            .setPadding(2);

        StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setFontSize(14) // Aumentar el tamaño de la fuente de las celdas
            .setPadding(5);

//         3. Crear un DRDataSource con los datos de la tabla
        DRDataSource dataSource = new DRDataSource(
             "ID Producto", "Nombre", "Causa de Daño", "Total Unidades Dañadas"
        );

//         Llenar el data source con los datos de la tabla
        for (int i = 0; i < tReporte.getRowCount(); i++) {
            dataSource.add(
                tReporte.getValueAt(i, 0).toString(),
                tReporte.getValueAt(i, 1).toString(),
                tReporte.getValueAt(i, 2).toString(),
                tReporte.getValueAt(i, 3).toString()
             
            );
        }

      
        

//         5. Construir el encabezado con logo a la izquierda y datos a la derecha
        try {
//             Cargar la imagen del logo
            java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
                getClass().getResourceAsStream("/imagenes/logo.jpg"));

//             Encabezado (logo + datos de empresa, fecha, usuario)
            report.title(
                Components.horizontalList() // Contenedor horizontal
                .add(
//                     LOGO
                    Components.image(logo)
                    .setFixedDimension(80, 80) // Aumentar tamaño del logo
                    .setStyle(DynamicReports.stl.style().setPadding(10)),
                    Components.horizontalGap(20), // Espacio entre logo y texto
//                     Bloque vertical con la info (Empresa, Fecha, Usuario)
                     Components.verticalList(

                            Components.text("                                                                                                                                                                            "
                                + "Empresa: SuperMercado Abigail"+"                          Fecha: " + labelFecha.getText())
                            .setStyle(infoStyle),
                            Components.text("Usuario: " + lbUsuario.getText())
                            .setStyle(infoStyle)
                        )
                )
//                 Opcional: bordes alrededor de la sección de encabezado
                .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
            );

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar el logo: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }

//         6. Título principal centrado debajo del encabezado
        report.title(
            Components.verticalGap(10),
            Components.text(lbTitulo.getText())
                .setStyle(DynamicReports.stl.style()
                    .setFontSize(20) // Aumentar el tamaño de la fuente del título
                    .setBold(true)
                    .setForegroundColor(new Color(0, 0, 0)))
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.text(obtenerRangoFechas())  .setStyle(DynamicReports.stl.style()
                    .setFontSize(20) // Aumentar el tamaño de la fuente del título
                    .setBold(true)
                    .setForegroundColor(new Color(0, 0, 0)))
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.verticalGap(20),
            
            Components.line(),Components.text("        ")
            
         
          
        );

//         7. Definir las columnas de la tabla
        String[] columnNames = {"ID Producto", "Nombre", "Causa de Daño", "Total Unidades Dañadas"};
        int[] columnWidths = {80, 145, 150, 105};

        for (int i = 0; i < columnNames.length; i++) {
            report.addColumn(
                Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
                    .setFixedWidth(columnWidths[i])
                    .setStyle(cellStyle)
                    .setTitleStyle(headerStyle)
            );
        }

//         8. Agregar la tabla al detalle
        report.setDataSource(dataSource);
        report.setDetailSplitType(SplitType.PREVENT);

//         9. Pie de página con información de generación y número de página
        report.pageFooter(
              Components.horizontalList(
                  Components.pageNumber()
                      .setStyle(DynamicReports.stl.style()
                          .setFontSize(8)
                          .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
                      )
                    )
                );

//         10. Mostrar el informe en el visor gráfico sin cerrar el programa
        report.show(false);

    } catch (DRException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
   
    }//GEN-LAST:event_btnImprimirActionPerformed


      

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    
// Método para obtener el rango de fechas seleccionadas
private String obtenerRangoFechas() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String fechaInicioStr = (jdInicio.getDate() != null) ? sdf.format(jdInicio.getDate()) : "N/A";
    String fechaFinStr = (jdFin.getDate() != null) ? sdf.format(jdFin.getDate()) : "N/A";
    return "Desde: "+fechaInicioStr + " Hasta: " + fechaFinStr;
}

    private void configurarDateChooser() {
        // Listener para jdInicio
        jdInicio.getDateEditor().addPropertyChangeListener(evt -> {
            if ("date".equals(evt.getPropertyName())) {
                cargarReporte(); // Cargar el reporte cuando cambie la fecha de inicio
            }
        });

        // Listener para jdFin
        jdFin.getDateEditor().addPropertyChangeListener(evt -> {
            if ("date".equals(evt.getPropertyName())) {
                cargarReporte(); // Cargar el reporte cuando cambie la fecha de fin
            }
        });
    }

    private void cargarReporte() {
        DefaultTableModel model = new DefaultTableModel(
            new Object[][] {}, 
            new String[] { "ID Producto", "Nombre", "Causa de Daño", "Total Unidades Dañadas" });

        tReporte.setModel(model);
        model.setRowCount(0);

        // Obtener las fechas seleccionadas
        Date fechaInicio = jdInicio.getDate();
        Date fechaFin = jdFin.getDate();

        // Formatear las fechas a String (formato yyyy-MM-dd)
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaInicioStr = (fechaInicio != null) ? sdf.format(fechaInicio) : null;
        String fechaFinStr = (fechaFin != null) ? sdf.format(fechaFin) : null;

        // Validar que la fecha de inicio no sea mayor que la fecha de fin (solo si ambas están seleccionadas)
        if (fechaInicio != null && fechaFin != null && fechaInicio.after(fechaFin)) {
            JOptionPane.showMessageDialog(this, "La fecha de inicio no puede ser mayor que la fecha de fin.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Llamada al procedimiento almacenado
        String sql = "{CALL sp_ReporteAnalisisCausasDanio(?, ?)}";

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall(sql)) {

            // Establecer los parámetros del procedimiento almacenado
            if (fechaInicioStr != null) {
                cstmt.setString(1, fechaInicioStr); // @FechaInicio
            } else {
                cstmt.setNull(1, java.sql.Types.DATE); // Pasar NULL si no hay fecha de inicio
            }

            if (fechaFinStr != null) {
                cstmt.setString(2, fechaFinStr); // @FechaFin
            } else {
                cstmt.setNull(2, java.sql.Types.DATE); // Pasar NULL si no hay fecha de fin
            }

            // Ejecutar el procedimiento almacenado
            ResultSet rs = cstmt.executeQuery();

            // Procesar el ResultSet
            while (rs.next()) {
                int idProducto = rs.getInt("IdProducto");
                String nombre = rs.getString("Producto");
                String causaDanio = rs.getString("CausaDeDanio");
                int totalDanado = rs.getInt("TotalUnidadesDanadas");

                // Agregar los datos a la tabla
                model.addRow(new Object[]{idProducto, nombre, causaDanio, totalDanado});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar el reporte: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    

    
    private void FechaActual(){
              Date fechaActual = new Date();

        // Formatear la fecha
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy");
        String fechaFormateada = formatter.format(fechaActual);

        // Crear el JLabel con la fecha
         labelFecha.setText(fechaFormateada);
        }
    
    
    
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCausas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCausas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCausas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCausas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCausas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdFin;
    private com.toedter.calendar.JDateChooser jdInicio;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JTable tReporte;
    // End of variables declaration//GEN-END:variables
}
