/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Reportes;

import Clases.DatabaseConnection;
import Clases.userClass;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Statement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.exception.DRException;

import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.SplitType;
import net.sf.dynamicreports.report.constant.VerticalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;
/**
 *
 * @author Axel Reyes
 */
public class frmProductoDañado extends javax.swing.JFrame {

    /**
     * Creates new form frmProductoDañado
     */
    public frmProductoDañado() {
        initComponents();
        cargarComboBox();
      cargarReporte();
         lbUsuario.setText(userClass.getUsername());
         FechaActual();
         configurarComboBox();
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         // Inicializar jdInicio con la fecha actual
    jdInicio.setDate(new Date()); // Establece la fecha actual por defecto
    jdInicio.setForeground(Color.red);
    
    
  JTextFieldDateEditor editor = (JTextFieldDateEditor) jdInicio.getDateEditor();
editor.setForeground(Color.white); // Inicialmente rojo

jdInicio.addPropertyChangeListener("date", new PropertyChangeListener() {
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // Cuando cambia la fecha, forzar el color del editor
        ((JTextFieldDateEditor) jdInicio.getDateEditor()).setForeground(Color.white);
    }
});

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdInicio = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tReporte = new javax.swing.JTable();
        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox<>();
        cmbProveedor = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jdInicio.setDateFormatString("yyyy-MM-dd");
        jdInicio.setDoubleBuffered(false);

        tReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tReporte.setEnabled(false);
        jScrollPane1.setViewportView(tReporte);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jLabel2.setText("Nombre :");

        jLabel3.setText("Fecha");

        lbUsuario.setText("jLabel4");

        labelFecha.setText("jLabel4");

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTitulo.setText("REPORTE DE PRODUCTOS DAÑADOS POR CATEGORÍA O PROVEEDOR");

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        cmbProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel5.setText("Proveedor");

        jLabel6.setText("Categoria");

        btnImprimir.setText("Crear Reporte");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jLabel7.setText("Fecha");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblLogo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146)
                                .addComponent(jLabel5)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelFecha)
                                .addGap(0, 551, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jdInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTitulo)
                        .addGap(35, 35, 35)
                        .addComponent(btnImprimir)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(lbUsuario)
                            .addComponent(labelFecha))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7))
                            .addComponent(jdInicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnImprimir)
                                .addGap(45, 45, 45)))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
  try {
        // 1. Configurar el informe con hoja A4 (orientación vertical) y márgenes
        JasperReportBuilder report = DynamicReports.report();
        report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
              .setPageMargin(DynamicReports.margin(20)); // Aumentar márgenes para mejor presentación

        // 2. Definir estilos
        StyleBuilder borderedStyle = DynamicReports.stl.style()
            .setBorder(DynamicReports.stl.pen1Point());
        
        StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setBackgroundColor(new Color(230, 230, 230)) // Color más suave
            .setFontSize(12)
            .setBold(true)
            .setPadding(5); // Añadir padding para mejor visualización
        
        StyleBuilder infoStyle = DynamicReports.stl.style()
            .setFontSize(10)
            .setBold(false)
            .setPadding(2); // Añadir padding

        StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setPadding(5); // Añadir padding para mejor visualización

        // 3. Definir las columnas de la tabla
        String[] columnNames = {"ID Producto", "Nombre", "Categoría", "Proveedor", "Fecha", "Total Dañado"};
        int[] columnWidths = {80, 100, 100, 110, 80, 70}; // Ajustar anchos de columnas

        for (int i = 0; i < columnNames.length; i++) {
            report.addColumn(
                Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
                      .setFixedWidth(columnWidths[i])
                      .setStyle(cellStyle) // Aplicar el estilo de celda centrado
                      .setTitleStyle(headerStyle)
            );
        }

        // 4. Crear un DRDataSource con los datos de la tabla
        DRDataSource dataSource = new DRDataSource(
            "ID Producto", "Nombre", "Categoría", "Proveedor", "Fecha", "Total Dañado"
        );

        // Llenar el data source con los datos de la tabla
        for (int i = 0; i < tReporte.getRowCount(); i++) {
            dataSource.add(
                tReporte.getValueAt(i, 0).toString(),
                tReporte.getValueAt(i, 1).toString(),
                tReporte.getValueAt(i, 2).toString(),
                tReporte.getValueAt(i, 3).toString(),
                tReporte.getValueAt(i, 4).toString(),
                tReporte.getValueAt(i, 5).toString()
            );
        }
        report.setDataSource(dataSource);

        // 5. Construir el encabezado con logo a la izquierda y datos a la derecha
        try {
            // Cargar la imagen del logo
            java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
                    getClass().getResourceAsStream("/imagenes/logo.jpg"));

            // Encabezado (logo + datos de empresa, fecha, usuario)
               report.title(
                Components.horizontalList() // Contenedor horizontal
                    .add(
                        // LOGO
                        Components.image(logo)
                                  .setFixedDimension(60, 60) // Ajusta el tamaño del logo
                                  .setStyle(DynamicReports.stl.style().setPadding(5)),
                        Components.horizontalGap(10), // Espacio entre logo y texto
                        // Bloque vertical con la info (Empresa, Fecha, Usuario)
                        Components.verticalList(
                           
                            Components.text("                                                                                                                                                                            "
                                    + "Empresa: SuperMercado Abigail"+"                                          Fecha: " + labelFecha.getText())
                                      .setStyle(infoStyle),
                            Components.text("Usuario: " + lbUsuario.getText())
                                      .setStyle(infoStyle)
                        )
                    )
                    // Opcional: bordes alrededor de la sección de encabezado
                    .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
            );
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar el logo: " + ex.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }

        // 6. Título principal centrado debajo del encabezado
        report.title(
            Components.verticalGap(10), // Un poco de separación
            Components.text(lbTitulo.getText())
                      .setStyle(DynamicReports.stl.style()
                                .setFontSize(16) // Aumentar tamaño de fuente
                                .setBold(true)
                                .setForegroundColor(new Color(0, 0, 0))) // Color negro
                      .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.verticalGap(10),
            Components.line().setPen(DynamicReports.stl.pen1Point()) // Línea separadora
        );

        // 7. Pie de página con información de generación y número de página
        report.pageFooter(
            Components.horizontalList(
                Components.pageNumber()
                    .setStyle(DynamicReports.stl.style()
                        .setFontSize(8)
                        .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
                    )
            )
        );

        // 8. Evitar que se divida la banda de detalle entre páginas
        report.setDetailSplitType(SplitType.PREVENT);

        // 9. Mostrar el informe en el visor gráfico sin cerrar el programa
        report.show(false); // 'false' evita que el programa se cierre

    } catch (DRException e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnImprimirActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmProductoDañado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmProductoDañado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmProductoDañado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmProductoDañado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmProductoDañado().setVisible(true);
            }
        });
    }
private void cargarReporte() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][] {}, // Datos vacíos inicialmente
        new String[] {     // Títulos de las columnas
            "ID Producto", 
            "Nombre", 
            "Categoría", 
            "Proveedor", 
            "Fecha",  // Nueva columna para la fecha
            "Total Dañado"
        });

    tReporte.setModel(model);
    model.setRowCount(0);

    // Obtener los valores seleccionados de los ComboBox y la fecha de inicio
    String categoriaSeleccionada = cmbCategoria.getSelectedItem().toString();
    String proveedorSeleccionado = cmbProveedor.getSelectedItem().toString();
    Date fechaInicio = jdInicio.getDate();  // Obtener la fecha de inicio

    // Llamada al procedimiento almacenado
    String sql = "{CALL obtener_reporte_productos_danados(?, ?, ?)}"; // Usar CALL para ejecutar procedimientos almacenados

    try (Connection conn = DatabaseConnection.getConnection();
         CallableStatement cstmt = conn.prepareCall(sql)) {

        // Establecer los parámetros del procedimiento almacenado
        cstmt.setString(1, proveedorSeleccionado); 
        cstmt.setString(2, categoriaSeleccionada);  

        // Pasar la fecha de inicio (o null si no se ha seleccionado una fecha)
        if (fechaInicio != null) {
            cstmt.setDate(3, new java.sql.Date(fechaInicio.getTime()));
        } else {
            cstmt.setNull(3, java.sql.Types.DATE); // Pasar null si no hay fecha seleccionada
        }

        // Ejecutar el procedimiento almacenado
        ResultSet rs = cstmt.executeQuery();

        // Procesar el ResultSet
        while (rs.next()) {
            int idProducto = rs.getInt("id_producto");
            String nombre = rs.getString("nombre_producto");
            String categoria = rs.getString("nombre_categoria");
            String proveedor = rs.getString("nombre_proveedor");
            Date fechaDevolucion = rs.getDate("fecha_devolucion");  // Obtener la fecha de devolución
            int total_daño = rs.getInt("total_danado");

            // Agregar los datos a la tabla
            model.addRow(new Object[]{idProducto, nombre, categoria, proveedor, fechaDevolucion, total_daño});
        }
        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar el reporte: " + e.getMessage());
    }
}


private void cargarComboBox() {
    // Cargar categorías
    String sqlCategorias = "SELECT nombre_categoria FROM Categorias";
    try (Connection cnx = DatabaseConnection.getConnection();
         Statement stmt = cnx.createStatement();
         ResultSet rs = stmt.executeQuery(sqlCategorias)) {

        while (rs.next()) {
            cmbCategoria.addItem(rs.getString("nombre_categoria"));
        }
        cnx.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar categorías: " + e.getMessage());
    }

    // Cargar proveedores
    String sqlProveedores = "SELECT nombre_proveedor FROM Proveedores";
    try (Connection cnx = DatabaseConnection.getConnection();
         Statement stmt = cnx.createStatement();
         ResultSet rs = stmt.executeQuery(sqlProveedores)) {

        while (rs.next()) {
            cmbProveedor.addItem(rs.getString("nombre_proveedor"));
        }
         cnx.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar proveedores: " + e.getMessage());
    }
}


private void configurarComboBox() {
    cmbCategoria.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categoría
            }
             cmbProveedor.setSelectedIndex(0);
        }
    });

    cmbProveedor.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione un proveedor
            }
             cmbCategoria.setSelectedIndex(0);
        }
    });

    // Agregar un listener para jdInicio
    jdInicio.addPropertyChangeListener("date", new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getNewValue() != null) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una fecha
            }
        }
    });
}




       
       
private void FechaActual(){
              Date fechaActual = new Date();

        // Formatear la fecha
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy");
        String fechaFormateada = formatter.format(fechaActual);

        // Crear el JLabel con la fecha
         labelFecha.setText(fechaFormateada);
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cmbCategoria;
    private javax.swing.JComboBox<String> cmbProveedor;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdInicio;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JTable tReporte;
    // End of variables declaration//GEN-END:variables
}
