
package Reportes;

import Clases.DatabaseConnection;
import Clases.userClass;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.sql.Statement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

import java.sql.Connection;
import javax.swing.table.DefaultTableModel;

import javax.swing.JOptionPane;
import java.util.Date;


import java.awt.Font;
import java.awt.RenderingHints;
import java.text.NumberFormat;
import java.util.Locale;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;


import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.exception.DRException;

import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.SplitType;
import net.sf.dynamicreports.report.constant.VerticalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
/**
 *
 * @author Axel Reyes
 */
public class frmCosto extends javax.swing.JFrame {

    /**
     * Creates new form frmCosto
     */
    public frmCosto() {
        initComponents();
        
        cargarReporte();
         lbUsuario.setText(userClass.getUsername());
         FechaActual();
         configurarComboBox();
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         cargarComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tReporte = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        cmbGrupo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox<>();
        cmbAno = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tReporte.setEnabled(false);
        jScrollPane1.setViewportView(tReporte);

        jLabel6.setText("Filtra por:");

        btnImprimir.setText("Crear Reporte");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.jpg"))); // NOI18N

        jLabel2.setText("Nombre :");

        jLabel3.setText("Fecha");

        lbUsuario.setText("jLabel4");

        labelFecha.setText("jLabel4");

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTitulo.setText("REPORTE DE COSTOS DE PRODUCTOS DAÑADOS POR CATEGORÍA ");

        cmbGrupo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Categoria", "Producto", "Proveedor" }));

        jLabel7.setText("Fecha");

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero" }));

        cmbAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024" }));
        cmbAno.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblLogo)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTitulo)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(lbUsuario)
                                .addGap(284, 284, 284)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(labelFecha))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(30, 30, 30)
                                .addComponent(cmbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(jLabel7)
                                .addGap(30, 30, 30)
                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(35, 35, 35)
                .addComponent(btnImprimir))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1264, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lbUsuario)
                            .addComponent(jLabel3)
                            .addComponent(labelFecha))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))))
                        .addGap(18, 18, 18)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnImprimir)))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
       try {
        // 1. Configurar el informe con hoja A4 (orientación vertical) y márgenes
        JasperReportBuilder report = DynamicReports.report();
        report.setPageFormat(PageType.A4, PageOrientation.PORTRAIT)
            .setPageMargin(DynamicReports.margin(20)); // Aumentar márgenes para mejor presentación

        // 2. Definir estilos
        StyleBuilder borderedStyle = DynamicReports.stl.style()
            .setBorder(DynamicReports.stl.pen1Point());

        StyleBuilder headerStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setBackgroundColor(new Color(230, 230, 230))
            .setFontSize(16) // Aumentar el tamaño de la fuente del encabezado
            .setBold(true)
            .setPadding(5);

        StyleBuilder infoStyle = DynamicReports.stl.style()
            .setFontSize(12) // Aumentar el tamaño de la fuente de la información
            .setBold(false)
            .setPadding(2);

        StyleBuilder cellStyle = DynamicReports.stl.style(borderedStyle)
            .setHorizontalAlignment(HorizontalAlignment.CENTER)
            .setVerticalAlignment(VerticalAlignment.MIDDLE)
            .setFontSize(14) // Aumentar el tamaño de la fuente de las celdas
            .setPadding(5);

        // 3. Crear un DRDataSource con los datos de la tabla
        DRDataSource dataSource = new DRDataSource(
            "ID", "Grupo", "Costo_total"
        );

        // Llenar el data source con los datos de la tabla
        for (int i = 0; i < tReporte.getRowCount(); i++) {
            dataSource.add(
                tReporte.getValueAt(i, 0).toString(),
                tReporte.getValueAt(i, 1).toString(),
                tReporte.getValueAt(i, 2).toString()
                
            );
        }

        // 4. Crear un gráfico con JFreeChart

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Obtener el número máximo de filas a procesar (máximo 10)
        int totalFilas = Math.min(10, tReporte.getRowCount());

        for (int i = 0; i < totalFilas; i++) {
            String nombre = tReporte.getValueAt(i, 1).toString();

            // Verificar si el valor de costo existe y limpiarlo
            Object valorCosto = tReporte.getValueAt(i, 2);
            if (valorCosto == null || valorCosto.toString().trim().isEmpty()) {
                continue; // Saltar si no hay valor
            }

            try {
                String costoTexto = valorCosto.toString()
                        .replace("L", "")
                        .replace(",", "");

                double costo = Double.parseDouble(costoTexto);
                dataset.addValue(costo, "Costo_total", nombre);
            } catch (NumberFormatException e) {
                System.err.println("Error al convertir el costo en la fila " + i + ": " + valorCosto);
            }
        }

        // Crear el gráfico
        JFreeChart chart = ChartFactory.createBarChart(
            "COSTOS POR "+cmbGrupo.getSelectedItem().toString().toUpperCase()+" DAÑADOS",// Título del gráfico
            cmbGrupo.getSelectedItem().toString(), // Etiqueta del eje X
            "Costo Total", // Etiqueta del eje Y
            dataset // Dataset con los datos
        );

        // Mejorar la calidad del gráfico
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRenderer(new BarRenderer());
        plot.setDomainGridlinesVisible(true);
        plot.setRangeGridlinesVisible(true);

        // Habilitar anti-aliasing
        chart.getRenderingHints().put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Cambiar el color de las barras
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        Color colorBarras = Color.decode("#80CAA6");
        renderer.setSeriesPaint(0, colorBarras);

        // Aumentar el tamaño de las etiquetas del eje Y (Cantidad)
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // Tamaño de fuente más grande
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits()); // Asegurar que sean enteros

        // Aumentar el tamaño de las etiquetas del eje X (Nombre)
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 24)); // Aumentar el tamaño aquí
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90); // Rotar etiquetas 90 grados

        // Aumentar el tamaño del título del gráfico
        chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 30)); // Tamaño de fuente más grande
        chart.getLegend().setItemFont(new Font("SansSerif", Font.PLAIN, 25));
        // Aumentar el tamaño de las etiquetas de los ejes
        plot.getDomainAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25)); // Eje X
        plot.getRangeAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 25));  // Eje Y

        // Aumentar el tamaño de la imagen
        BufferedImage chartImage = chart.createBufferedImage(1200, 1200);

        // 5. Construir el encabezado con logo a la izquierda y datos a la derecha
        try {
            // Cargar la imagen del logo
            java.awt.image.BufferedImage logo = javax.imageio.ImageIO.read(
                getClass().getResourceAsStream("/imagenes/logo.jpg"));

            // Encabezado (logo + datos de empresa, fecha, usuario)
            report.title(
                Components.horizontalList() // Contenedor horizontal
                .add(
                    // LOGO
                    Components.image(logo)
                    .setFixedDimension(80, 80) // Aumentar tamaño del logo
                    .setStyle(DynamicReports.stl.style().setPadding(10)),
                    Components.horizontalGap(20), // Espacio entre logo y texto
                    // Bloque vertical con la info (Empresa, Fecha, Usuario)
                      Components.verticalList(

                            Components.text("                                                                                                                                                                            "
                                + "Empresa: SuperMercado Abigail"+"                          Fecha: " + labelFecha.getText())
                            .setStyle(infoStyle),
                            Components.text("Usuario: " + lbUsuario.getText())
                            .setStyle(infoStyle)
                        )
                )
                // Opcional: bordes alrededor de la sección de encabezado
                .setStyle(DynamicReports.stl.style().setBorder(DynamicReports.stl.penThin()))
            );

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar el logo: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }

        // 6. Título principal centrado debajo del encabezado
        report.title(
            Components.verticalGap(10),
            Components.text(lbTitulo.getText()+" "+cmbMes.getSelectedItem().toString().toUpperCase()+" "+ cmbAno.getSelectedItem().toString())
                .setStyle(DynamicReports.stl.style()
                    .setFontSize(20) // Aumentar el tamaño de la fuente del título
                    .setBold(true)
                    .setForegroundColor(new Color(0, 0, 0)))
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.verticalGap(20),
            Components.line().setPen(DynamicReports.stl.pen1Point()),
            Components.image(chartImage)
                .setFixedDimension(555, 450)
                .setHorizontalAlignment(HorizontalAlignment.CENTER),
            Components.pageBreak()
        );

        // 7. Definir las columnas de la tabla
        String[] columnNames = {"ID", "Grupo", "Costo_total"};
        int[] columnWidths = {80, 145, 100, 105, 80};

        for (int i = 0; i < columnNames.length; i++) {
            report.addColumn(
                Columns.column(columnNames[i], columnNames[i], DataTypes.stringType())
                    .setFixedWidth(columnWidths[i])
                    .setStyle(cellStyle)
                    .setTitleStyle(headerStyle)
            );
        }

        // 8. Agregar la tabla al detalle
        report.setDataSource(dataSource);
        report.setDetailSplitType(SplitType.PREVENT);

        // 9. Pie de página con información de generación y número de página
         report.pageFooter(
              Components.horizontalList(
                  Components.pageNumber()
                      .setStyle(DynamicReports.stl.style()
                          .setFontSize(8)
                          .setHorizontalAlignment(HorizontalAlignment.RIGHT) // Alinea a la derecha
                      )
                    )
                );

        // 10. Mostrar el informe en el visor gráfico sin cerrar el programa
        report.show(false);

    } catch (DRException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    

    }//GEN-LAST:event_btnImprimirActionPerformed
private void cargarComboBox() {
    // Cargar meses (nombres)
    String[] meses = {"Febrero", "Marzo", "Abril", "Mayo", "Junio", 
                      "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    for (String mes : meses) {
        cmbMes.addItem(mes);
    }

    // Agregar un ItemListener a cmbGrupo
    cmbGrupo.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categoría
                String seleccion = cmbGrupo.getSelectedItem().toString().toUpperCase();
                lbTitulo.setText("REPORTE DE COSTOS DE PRODUCTOS DAÑADOS POR " + seleccion);
            }
        }
    });

    // Agregar un ItemListener a cmbMes
    cmbMes.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione un mes
            }
        }
    });
    
    
    String sqlAnios = "SELECT DISTINCT año FROM vista_reporte_nc ORDER BY año ASC";
    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sqlAnios)) {

        while (rs.next()) {
            cmbAno.addItem(rs.getString("año"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar años: " + e.getMessage());
    }

    
}
    
 private void cargarReporte() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][] {}, 
        new String[] { "ID", "Grupo", "Costo_total" }
    );

    tReporte.setModel(model);
    model.setRowCount(0);

    // Obtener los valores seleccionados de los ComboBox
    String GrupoSeleccionada = cmbGrupo.getSelectedItem().toString();
    String mes = cmbMes.getSelectedItem().toString();
    int año = Integer.parseInt(cmbAno.getSelectedItem().toString());

    // Llamada al procedimiento almacenado
    String sql = "{CALL sp_ReporteCostosDanados(?,?,?)}";

    try (Connection conn = DatabaseConnection.getConnection();
         CallableStatement cstmt = conn.prepareCall(sql)) {

        cstmt.setString(1, GrupoSeleccionada);
        cstmt.setString(2, mes);
        cstmt.setInt(3, año);
        ResultSet rs = cstmt.executeQuery();

        // Formato de moneda en lempiras
        NumberFormat formatoMoneda = NumberFormat.getCurrencyInstance(new Locale("es", "HN"));

        while (rs.next()) {
            int ID = rs.getInt("IdGrupo");
            String Grupo = rs.getString("Grupo");
            int Costo = rs.getInt("CostoTotal");

            // Convertir el costo a formato de moneda
            String costoFormateado = formatoMoneda.format(Costo);

            // Agregar los datos a la tabla
            model.addRow(new Object[]{ID, Grupo, costoFormateado});
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar el reporte: " + e.getMessage());
    }
}


    
private void configurarComboBox() {
    // Agregar un ItemListener a cmbGrupo
    cmbGrupo.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  // Actualizar la tabla cuando se seleccione una categoría
                String seleccion = cmbGrupo.getSelectedItem().toString().toUpperCase();

                lbTitulo.setText("REPORTE DE COSTOS DE PRODUCTOS DAÑADOS POR " +seleccion);
            }
        }
    });

    
    
        cmbMes.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte();  
            }
            
        }
    });
       cmbAno.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cargarReporte(); 
            }
            
        }
    });
}


       
private void FechaActual(){
              Date fechaActual = new Date();

        // Formatear la fecha
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy");
        String fechaFormateada = formatter.format(fechaActual);

        // Crear el JLabel con la fecha
         labelFecha.setText(fechaFormateada);
        }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCosto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCosto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCosto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCosto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCosto().setVisible(true);
            }
        });
    }
    
    
    
     /*
  Crea y muestra un gráfico de barras en el panel jGrafico con los datos actuales

//private void actualizarGraficoEnPanel() {
//    // 1. Crear el dataset con los datos de la tabla
//    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//    
//    // Obtener los datos de la tabla tReporte
//    for (int i = 0; i < tReporte.getRowCount(); i++) {
//        String grupo = tReporte.getValueAt(i, 1).toString();
//        int costo = Integer.parseInt(tReporte.getValueAt(i, 2).toString());
//        dataset.addValue(costo, "Costo Total", grupo);
//    }
//    
//    // 2. Crear el gráfico de barras
//    JFreeChart chart = ChartFactory.createBarChart(
//        "Costos de Productos Dañados por " + cmbGrupo.getSelectedItem().toString(),
//        cmbGrupo.getSelectedItem().toString(),
//        "Costo Total ($)",
//        dataset
//    );
//    
//    // 3. Personalizar el gráfico
//    CategoryPlot plot = chart.getCategoryPlot();
//    
//    // Configurar colores y estilos
//    plot.setBackgroundPaint(Color.WHITE);
//    plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
//    
//    BarRenderer renderer = (BarRenderer) plot.getRenderer();
//    renderer.setSeriesPaint(0, new Color(79, 129, 189)); // Color azul para las barras
//    
//    // Configurar fuentes
//    chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 16));
//    plot.getDomainAxis().setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
//    plot.getRangeAxis().setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
//    
//    // 4. Crear el panel del gráfico y mostrarlo en jGrafico
//    ChartPanel chartPanel = new ChartPanel(chart);
//    chartPanel.setPreferredSize(new Dimension(jGrafico.getWidth(), jGrafico.getHeight()));
//    
//    // Limpiar el panel y agregar el nuevo gráfico
//    jGrafico.removeAll();
//    jGrafico.setLayout(new BorderLayout());
//    jGrafico.add(chartPanel, BorderLayout.CENTER);
//    
//    // Actualizar la interfaz
//    jGrafico.revalidate();
//    jGrafico.repaint();
//}   

    

 */  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cmbAno;
    private javax.swing.JComboBox<String> cmbGrupo;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JTable tReporte;
    // End of variables declaration//GEN-END:variables
}
